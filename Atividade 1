Essa atividade foi realizada por meio de linguagem python, utilizando o jupyter notebook.

--------- ATIVIDADE 1 (RESOLUÇÃO)----------

Dado um string de DNA (arquivo DNA.txt presente na mesma pasta) forneça:

A) O número de vezes que cada um dos nucleotídeos 'A', 'C', 'G' e 'T' aparecem.

RESOLUÇÃO: 
Para contagem da quantidade de nucleotídeos 'A', 'C', 'G' e 'T', utilizei a função contagem em loop e adição ao dicionário para cada nucleotídeo.

CÓDIGO UTILIZADO EM PYTHON:

sequencia = DNA.txt
def contar_nucleotideos(string):
    contagem = {}
    for base in string: 
        if base in contagem:
            contagem[base] += 1
        else:
            contagem[base] = 1
    return contagem

string = sequencia
resultado = contar_nucleotideos(string)
print(resultado)

{'T': 189, 'A': 209, 'G': 201, 'C': 227}. 


B) Um novo arquivo (nomeado como RNA.txt) com a sequência de RNA transcrita.

RESOLUÇÃO:
Para a transcrição do RNA, usei funções de troca de caracteres da minha string (no caso a sequência do DNA). Utilizei as funções 'maketrans', para haver a 'troca' das bases e a função 'translate' para uma abordagem mais rápida e eficaz.

CÓDIGO UTILIZADO EM PYTHON:

RNA_trans = sequencia
transcrito = str.maketrans({"T": "A", "A": "U", "C": "G", "G": "C"})
RNA_trans = sequencia.translate(transcrito)
print(RNA_trans)

RNA_trans = RNA.txt.


C) Um novo arquivo (nomeado como AA.txt) com a sequência de aminoácidos traduzida.

RESOLUÇÃO:
Para a tradução do RNA, primeiro criei um dicionário para o código genético determinando a tradução de cada códon. Em seguida adicionei condições para que a minha sequência fosse separas em trios (códon), para inorar códons incompleto e para mostrar códons inválidos.

CÓDIGO UTILIZADO EM PYTHON:
rna = RNA.txt
def traduzir_rna_para_aminoacidos(rna):
    codigo_genetico = {"UUU": "F", "UUC": "F", "UUA": "L", "UUG": "L", "CUU": "L", "CUC": "L", "CUA": "L", "CUG": "L", "AUU": "I", "AUC": "I", "AUA": "I", "AUG": "M", "GUU": "V", "GUC": "V", "GUA": "V", "GUG": "V", "UCU": "S", "UCC": "S", "UCA": "S", "UCG": "S", "CCU": "P", "CCC": "P", "CCA": "P", "CCG": "P","ACU": "T", "ACC": "T", "ACA": "T", "ACG": "T", "GCU": "A", "GCC": "A", "GCA": "A", "GCG": "A", "UAU": "Y", "UAC": "Y", "UAA": "*", "UAG": "*", "CAU": "H", "CAC": "H", "CAA": "Q", "CAG": "Q", "AAU": "N", "AAC": "N", "AAA": "K", "AAG": "K", "GAU": "D", "GAC": "D", "GAA": "E", "GAG": "E", "UGU": "C", "UGC": "C", "UGA": "*", "UGG": "W", "CGU": "R", "CGC": "R", "CGA": "R", "CGG": "R", "AGU": "S", "AGC": "S", "AGA": "R", "AGG": "R", "GGU": "G", "GGC": "G", "GGA": "G", "GGG": "G"}
    aminoacidos = []
    for i in range(0, len(rna), 3):
        codon = rna[i:i+3]
        if len(codon) == 3: 
            aminoacidos.append(codigo_genetico.get(codon, "-"))
            
    return "".join(aminoacidos)

aminoacidos = traduzir_rna_para_aminoacidos(rna)
print(aminoacidos)

Para definir inicio da tradução (metionina) e fim (codon de parada), ainda utilizei a função de imrprimir apenas uma parte limitada da minha string:

def tradução_AA(string, Metionina, codon_parada):
    inicio = string.find(Metionina)
    parada = string.find(codon_parada, inicio)
     if inicio != -1 and parada != -1:
        print(string[inicio:parada])

string = aminoacidos
Metionina = "M"
codon_parada = "Ç"
imprimir_substring(string, Metionina, codon_parada)

Aminoácidos = AA.txt
